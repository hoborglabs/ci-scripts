#!/bin/bash

_DIR_="$(dirname "$0")"

. "$_DIR_/../lib/log"
. "$_DIR_/functions"

usage() {
	msg=$1
	if [[ $msg ]]; then
		logMsg "$msg"
	fi

	echo "tag-next-version -v 2.3

 -v <version> base (major and minor) version number like 2.1
 -m <msg>     Tag message
 -c <file>    Generate changelog and save to given file
 -p           Push tags
 -b 'branch'  Name of branch (defaults to master)
 -h           Displays this message
	"

	exit 1;
}

main() {
	pushTags=0
	branchName='master'
	# get options
	while getopts b:m::v:c::ph opt; do
		case "$opt" in
			b)
				branchName="$OPTARG"
				;;

			m)
				commitMsg="$OPTARG"
				;;

			v)
				baseVersion="$OPTARG"
				;;

			c)
				changelogFile="${OPTARG:CHANGELOG}"
				;;

			p)
				pushTags=1
				;;

			h)
				usage
				;;

			"")
				usage "Missing arguments";
				;;

			*)
				usage "Unrecognied option '$opt'";
				;;
		esac
	done;

	if [[ -z $baseVersion ]]; then
		usage "You have to specify base version like -v v2.4 to tag v2.4.14"
	fi

	previousTag='';
	nextTag='';

	# if we are in detached state, create local branch
	ensureOnBranch "$branchName"

	getLatestTag "$baseVersion" previousTag
	getNextTag "$baseVersion" nextTag

	logMsg "Current version: $previousTag"
	makeTag "$nextTag" "$commitMsg"

	if [[ $changelogFile ]]; then
		generateChangelog "$previousTag" "$nextTag" "$changelogFile"
	fi

	if [[ $pushTags ]]; then
		git push origin "$nextTag"
	fi

	exit 0
}

getLatestTag() {
	base=$1

	bugfix=`git tag -l | grep "${base}" | sed "s/${base}\.\([0-9]*\)/\1/" | sort -n | tail -1`

	if [[ -z $bugfix ]]; then
		tag=`git describe --abbrev=0 --tags`
		eval "$2='$tag'"
		return 0
	fi

	eval "$2='$base.$bugfix'"
}

getNextTag() {
	base=$1

	bugfix=`git tag -l | grep "${base}" | sed "s/${base}\.\([0-9]*\)/\1/" | sort -n | tail -1`

	if [[ -z $bugfix ]]; then
		eval "$2='$base.0'"
		return 0
	fi

	bugfix=`expr $bugfix + 1`

	eval "$2='$base.$bugfix'"
}

makeTag() {
	nextTag=$1
	commitMsg=$2
	if [[ -z $commitMsg ]]; then
		git tag $nextTag
	else
		git tag $nextTag -m "$commitMsg"
	fi
	logMsg "Tagged $nextTag"
}

generateChangelog() {
	prevVersion=$1
	nextVersion=$2
	file=$3

	echo "Change log for version $nextVersion" > $file
	echo "" >> $file
	git log --no-merges --date=short --pretty='* %cd, %s (%cn, %h)' "$prevVersion".."$nextVersion" >> $file

	logMsg "Saved changelog to: $file"
}

main "$@"
