#!/bin/bash

usage() {
	msg=$1
	if [[ $msg ]]; then
		logMsg "$msg"
	fi

	echo "tag-next-version -v 2.3

 -v <version> base (major and minor) version number like 2.1
 -m <msg>     Tag message
 -c <file>    Generate changelog and save to given file
	"

	exit 1;
}

main() {
	changelogFile=''

	# get options
	while getopts m:v:c: opt; do
		case "$opt" in
			m)
				commitMsg="$OPTARG"
				;;

			v)
				baseVersion="$OPTARG"
				;;

			c)
				changelogFile="${OPTARG:CHANGELOG}"
				;;

			h)
				usage
				;;

			"")
				usage "Missing arguments";
				;;

			*)
				usage "Unrecognied option '$opt'";
				;;
		esac
	done;

	if [[ -z $baseVersion ]]; then
		usage "You have to specify base version like -v v2.4"
	fi

	previousTag='';
	nextTag='';

	getLatestTag "$baseVersion" previousTag
	getNextTag "$baseVersion" nextTag

	if [[ -z $commitMsg ]]; then
		git tag $nextTag
	else
		git tag $nextTag -m "$commitMsg"
	fi
	echo "Tagged $nextTag"

	if [[ $changelogFile ]]; then
		generateChangelog "$previousTag" "$nextTag" "$changelogFile"
	fi

	exit 0
}


getLatestTag() {
	base=$1

	bugfix=`git tag -l | grep "${base}" | sed "s/${base}\.\([0-9]*\)/\1/" | sort -n | tail -1`

	if [[ -z $bugfix ]]; then
		tag=`git describe --abbrev=0 --tags`
		eval "$2='$tag'"
		return 0
	fi

	eval "$2='$base.$bugfix'"
}

getNextTag() {
	base=$1

	bugfix=`git tag -l | grep "${base}" | sed "s/${base}\.\([0-9]*\)/\1/" | sort -n | tail -1`

	if [[ -z $bugfix ]]; then
		eval "$2='$base.0'"
		return 0
	fi

	bugfix=`expr $bugfix + 1`

	eval "$2='$base.$bugfix'"
}

generateChangelog() {
	prevVersion=$1
	nextVersion=$2
	file=$3

	echo "Change log for version $nextVersion" > $file
	echo "" >> $file
	git log --no-merges --date=short --pretty='* %cd, %s (%cn, %h)' "$prevVersion".."$nextVersion" >> $file

	echo "Saved changelog to: $file"
}

logMsg() {
	msg=$1
	echo "  $msg"
}

main "$@"
