#!/bin/bash

_DIR_="$(dirname "$0")"

. "$_DIR_/../lib/log"

usage() {
	msg=$1
	if [[ $msg ]]; then
		logMsg "$msg"
	fi

	echo "add-and-commit -m 'my commit message' -d ./dist:./CHANGELOG

-m 'msg'     Commit message
-d 'dir'     List of files or folders to add, separated with ':'
	"
	exit 1;
}

main() {
	# get options
	branchName='master'
	while getopts m:d:b:h opt; do
		case "$opt" in
			m)
				commitMsg="$OPTARG"
				;;

			d)
				commitDirs="$OPTARG"
				;;

			b)
				branchName="$OPTARG"
				;;

			h)
				usage
				;;

			"")
				usage "Missing arguments";
				;;

			*)
				usage "Unrecognied option '$opt'";
				;;
		esac
	done;

	if [[ -z $commitDirs || -z $commitMsg ]]; then
		usage
	fi

	ensureOnBranch "$branchName"
	gitAdd "$commitDirs"
	gitCommitAndPush "$commitMsg"

	exit 0
}

ensureOnBranch() {
	branch=$1

	currentBranch=`git symbolic-ref -q HEAD | sed 's/.*\/\(.*\)/\1/'`

	if [[ -z $currentBranch ]]; then
		logMsg "Currently not on any branch"

		remote=`git remote`
		if [[ -z $remote ]]; then
			originHEAD=`git log -n1 --pretty=%h $branch`
		else
			originHEAD=`git log -n1 --pretty=%h $remote/$branch`
		fi

		localHEAD=`git log -n1 --pretty=%h`

		if [[ $localHEAD == $originHEAD ]]; then
			logMsg "local and origin HEADs looks the same ($localHEAD). Switching to branch '$branch'"
			git checkout $branch -q
			return 0
		fi

		logError "local HEAD ($localHEAD) and origin $branch HEAD ($originHEAD) are different." 1
	fi

	if [[ "$currentBranch" == "$branch" ]]; then
		logError "Branch mismatch. Expecting ${branch} but actually on ${currentBranch}" 1
	fi

}

#
gitAdd() {
	dirs=$1

	logMsg "Looking for changes in: $dirs"

	git add $dirs

	newFiles=`git diff --name-only --cached`
	if [[ -z $newFiles ]]; then
		logError "No changes found." 0
	fi

	logMsg "Files to be commited:"
	for file in $newFiles; do
		logMsg " * $file"
	done
}

gitCommitAndPush() {
	cm=$1

	# commit and push to current branch
	git commit -m "$cm" -q

	remote=`git remote`
	if [[ -z $remote ]]; then
		logMsg "Nothing to push, there is no remote repository"
	else
		git push $remote HEAD -q
	fi



	lastCommit=`git log -n 1 --pretty="%h, %s"`
	logMsg "Commited and pushed - ${lastCommit}"
}

main "$@"
